!!$              Parallel Sparse BLAS   GPU plugin 
!!$    (C) Copyright 2013
!!$
!!$                       Salvatore Filippone    University of Rome Tor Vergata
!!$                       Alessandro Fanfarillo  University of Rome Tor Vergata
!!$ 
!!$  Redistribution and use in source and binary forms, with or without
!!$  modification, are permitted provided that the following conditions
!!$  are met:
!!$    1. Redistributions of source code must retain the above copyright
!!$       notice, this list of conditions and the following disclaimer.
!!$    2. Redistributions in binary form must reproduce the above copyright
!!$       notice, this list of conditions, and the following disclaimer in the
!!$       documentation and/or other materials provided with the distribution.
!!$    3. The name of the PSBLAS group or the names of its contributors may
!!$       not be used to endorse or promote products derived from this
!!$       software without specific written permission.
!!$ 
!!$  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
!!$  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
!!$  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
!!$  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PSBLAS GROUP OR ITS CONTRIBUTORS
!!$  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
!!$  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
!!$  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
!!$  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
!!$  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
!!$  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
!!$  POSSIBILITY OF SUCH DAMAGE.
!!$ 
  

module psb_@X@_dia_mat_mod

  use psb_@X@_base_mat_mod

  type, extends(psb_@X@_base_sparse_mat) :: psb_@X@_dia_sparse_mat
    !
    ! DIA format, extended.
    !     
    
    integer(psb_ipk_), allocatable :: offset(:)
    integer(psb_ipk_) :: nzeros
    @TYPE@(@FKIND@), allocatable :: data(:,:)

  contains
    ! procedure, pass(a) :: get_size     => @X@_dia_get_size
    procedure, pass(a) :: get_nzeros   => @X@_dia_get_nzeros
    procedure, nopass  :: get_fmt      => @X@_dia_get_fmt
    procedure, pass(a) :: sizeof       => @X@_dia_sizeof
    procedure, pass(a) :: csmm         => psb_@X@_dia_csmm
    procedure, pass(a) :: csmv         => psb_@X@_dia_csmv
    ! procedure, pass(a) :: inner_cssm   => psb_@X@_dia_cssm
    ! procedure, pass(a) :: inner_cssv   => psb_@X@_dia_cssv
    procedure, pass(a) :: scals        => psb_@X@_dia_scals
    procedure, pass(a) :: scalv        => psb_@X@_dia_scal
    procedure, pass(a) :: maxval       => psb_@X@_dia_maxval
    procedure, pass(a) :: rowsum       => psb_@X@_dia_rowsum
    procedure, pass(a) :: arwsum       => psb_@X@_dia_arwsum
    procedure, pass(a) :: colsum       => psb_@X@_dia_colsum
    procedure, pass(a) :: aclsum       => psb_@X@_dia_aclsum
    procedure, pass(a) :: reallocate_nz => psb_@X@_dia_reallocate_nz
    procedure, pass(a) :: allocate_mnnz => psb_@X@_dia_allocate_mnnz
    procedure, pass(a) :: cp_to_coo    => psb_@X@_cp_dia_to_coo
    procedure, pass(a) :: cp_from_coo  => psb_@X@_cp_dia_from_coo
    ! procedure, pass(a) :: mv_to_coo    => psb_@X@_mv_dia_to_coo
    ! procedure, pass(a) :: mv_from_coo  => psb_@X@_mv_dia_from_coo
    ! procedure, pass(a) :: mv_to_fmt    => psb_@X@_mv_dia_to_fmt
    ! procedure, pass(a) :: mv_from_fmt  => psb_@X@_mv_dia_from_fmt
    ! procedure, pass(a) :: csput_a      => psb_@X@_dia_csput_a
    procedure, pass(a) :: get_diag     => psb_@X@_dia_get_diag
    procedure, pass(a) :: csgetptn     => psb_@X@_dia_csgetptn
    procedure, pass(a) :: csgetrow     => psb_@X@_dia_csgetrow
    ! procedure, pass(a) :: get_nz_row   => @X@_dia_get_nz_row
    procedure, pass(a) :: reinit       => psb_@X@_dia_reinit
    ! procedure, pass(a) :: trim         => psb_@X@_dia_trim
    procedure, pass(a) :: print        => psb_@X@_dia_print
    procedure, pass(a) :: free         => @X@_dia_free
    procedure, pass(a) :: mold         => psb_@X@_dia_mold

  end type psb_@X@_dia_sparse_mat

  private :: @X@_dia_get_nzeros, @X@_dia_free,  @X@_dia_get_fmt, &
       & @X@_dia_get_size, @X@_dia_sizeof, @X@_dia_get_nz_row

  interface
    subroutine  psb_@X@_dia_reallocate_nz(nz,a) 
      import :: psb_@X@_dia_sparse_mat, psb_ipk_
      integer(psb_ipk_), intent(in) :: nz
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
    end subroutine psb_@X@_dia_reallocate_nz
  end interface
  
  interface 
    subroutine psb_@X@_dia_reinit(a,clear)
      import :: psb_@X@_dia_sparse_mat
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a   
      logical, intent(in), optional :: clear
    end subroutine psb_@X@_dia_reinit
  end interface
  
  interface
    subroutine  psb_@X@_dia_trim(a)
      import :: psb_@X@_dia_sparse_mat
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
    end subroutine psb_@X@_dia_trim
  end interface
  
  interface 
    subroutine psb_@X@_dia_mold(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_base_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in)                  :: a
      class(psb_@X@_base_sparse_mat), intent(inout), allocatable :: b
      integer(psb_ipk_), intent(out)                           :: info
    end subroutine psb_@X@_dia_mold
  end interface

  interface
    subroutine  psb_@X@_dia_allocate_mnnz(m,n,a,nz) 
      import :: psb_@X@_dia_sparse_mat, psb_ipk_
      integer(psb_ipk_), intent(in) :: m,n
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      integer(psb_ipk_), intent(in), optional :: nz
    end subroutine psb_@X@_dia_allocate_mnnz
  end interface
  
  interface
    subroutine psb_@X@_dia_print(iout,a,iv,head,ivr,ivc)
      import :: psb_@X@_dia_sparse_mat, psb_ipk_
      integer(psb_ipk_), intent(in)           :: iout
      class(psb_@X@_dia_sparse_mat), intent(in) :: a   
      integer(psb_ipk_), intent(in), optional :: iv(:)
      character(len=*), optional              :: head
      integer(psb_ipk_), intent(in), optional :: ivr(:), ivc(:)
    end subroutine psb_@X@_dia_print
  end interface
  
  interface 
    subroutine psb_@X@_cp_dia_to_coo(a,b,info) 
      import :: psb_@X@_coo_sparse_mat, psb_@X@_dia_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in)    :: a
      class(psb_@X@_coo_sparse_mat), intent(inout) :: b
      integer(psb_ipk_), intent(out)             :: info
    end subroutine psb_@X@_cp_dia_to_coo
  end interface
  
  interface 
    subroutine psb_@X@_cp_dia_from_coo(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_coo_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      class(psb_@X@_coo_sparse_mat), intent(in)    :: b
      integer(psb_ipk_), intent(out)             :: info
    end subroutine psb_@X@_cp_dia_from_coo
  end interface
  
  interface 
    subroutine psb_@X@_cp_dia_to_fmt(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_base_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in)     :: a
      class(psb_@X@_base_sparse_mat), intent(inout) :: b
      integer(psb_ipk_), intent(out)              :: info
    end subroutine psb_@X@_cp_dia_to_fmt
  end interface
  
  interface 
    subroutine psb_@X@_cp_dia_from_fmt(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_base_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      class(psb_@X@_base_sparse_mat), intent(in)   :: b
      integer(psb_ipk_), intent(out)             :: info
    end subroutine psb_@X@_cp_dia_from_fmt
  end interface
  
  interface 
    subroutine psb_@X@_mv_dia_to_coo(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_coo_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      class(psb_@X@_coo_sparse_mat), intent(inout) :: b
      integer(psb_ipk_), intent(out)             :: info
    end subroutine psb_@X@_mv_dia_to_coo
  end interface
  
  interface 
    subroutine psb_@X@_mv_dia_from_coo(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_coo_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      class(psb_@X@_coo_sparse_mat), intent(inout) :: b
      integer(psb_ipk_), intent(out)             :: info
    end subroutine psb_@X@_mv_dia_from_coo
  end interface
  
  interface 
    subroutine psb_@X@_mv_dia_to_fmt(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_base_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout)  :: a
      class(psb_@X@_base_sparse_mat), intent(inout) :: b
      integer(psb_ipk_), intent(out)              :: info
    end subroutine psb_@X@_mv_dia_to_fmt
  end interface
  
  interface 
    subroutine psb_@X@_mv_dia_from_fmt(a,b,info) 
      import :: psb_@X@_dia_sparse_mat, psb_@X@_base_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout)  :: a
      class(psb_@X@_base_sparse_mat), intent(inout) :: b
      integer(psb_ipk_), intent(out)              :: info
    end subroutine psb_@X@_mv_dia_from_fmt
  end interface
  
  interface 
    subroutine psb_@X@_dia_csput_a(nz,ia,ja,val,a,imin,imax,jmin,jmax,info,gtl) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      @TYPE@(@FKIND@), intent(in)      :: val(:)
      integer(psb_ipk_), intent(in)             :: nz,ia(:), ja(:),&
           &  imin,imax,jmin,jmax
      integer(psb_ipk_), intent(out)            :: info
      integer(psb_ipk_), intent(in), optional   :: gtl(:)
    end subroutine psb_@X@_dia_csput_a
  end interface
  
  interface 
    subroutine psb_@X@_dia_csgetptn(imin,imax,a,nz,ia,ja,info,&
         & jmin,jmax,iren,append,nzin,rscale,cscale)
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in)        :: a
      integer(psb_ipk_), intent(in)                  :: imin,imax
      integer(psb_ipk_), intent(out)                 :: nz
      integer(psb_ipk_), allocatable, intent(inout)  :: ia(:), ja(:)
      integer(psb_ipk_),intent(out)                  :: info
      logical, intent(in), optional        :: append
      integer(psb_ipk_), intent(in), optional        :: iren(:)
      integer(psb_ipk_), intent(in), optional        :: jmin,jmax, nzin
      logical, intent(in), optional        :: rscale,cscale
    end subroutine psb_@X@_dia_csgetptn
  end interface
  
  interface 
    subroutine psb_@X@_dia_csgetrow(imin,imax,a,nz,ia,ja,val,info,&
         & jmin,jmax,iren,append,nzin,rscale,cscale)
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in)        :: a
      integer(psb_ipk_), intent(in)                  :: imin,imax
      integer(psb_ipk_), intent(out)                 :: nz
      integer(psb_ipk_), allocatable, intent(inout)  :: ia(:), ja(:)
      @TYPE@(@FKIND@), allocatable,  intent(inout)    :: val(:)
      integer(psb_ipk_),intent(out)                  :: info
      logical, intent(in), optional        :: append
      integer(psb_ipk_), intent(in), optional        :: iren(:)
      integer(psb_ipk_), intent(in), optional        :: jmin,jmax, nzin
      logical, intent(in), optional        :: rscale,cscale
    end subroutine psb_@X@_dia_csgetrow
  end interface

  interface 
    subroutine psb_@X@_dia_csgetblk(imin,imax,a,b,info,&
       & jmin,jmax,iren,append,rscale,cscale)
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_@X@_coo_sparse_mat, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in)    :: a
      class(psb_@X@_coo_sparse_mat), intent(inout) :: b
      integer(psb_ipk_), intent(in)              :: imin,imax
      integer(psb_ipk_),intent(out)              :: info
      logical, intent(in), optional        :: append
      integer(psb_ipk_), intent(in), optional    :: iren(:)
      integer(psb_ipk_), intent(in), optional    :: jmin,jmax
      logical, intent(in), optional        :: rscale,cscale
    end subroutine psb_@X@_dia_csgetblk
  end interface
    
  interface 
    subroutine psb_@X@_dia_cssv(alpha,a,x,beta,y,info,trans) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @TYPE@(@FKIND@), intent(in)          :: alpha, beta, x(:)
      @TYPE@(@FKIND@), intent(inout)       :: y(:)
      integer(psb_ipk_), intent(out)           :: info
      character, optional, intent(in)          :: trans
    end subroutine psb_@X@_dia_cssv
    subroutine psb_@X@_dia_cssm(alpha,a,x,beta,y,info,trans) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @TYPE@(@FKIND@), intent(in)          :: alpha, beta, x(:,:)
      @TYPE@(@FKIND@), intent(inout)       :: y(:,:)
      integer(psb_ipk_), intent(out)       :: info
      character, optional, intent(in)      :: trans
    end subroutine psb_@X@_dia_cssm
  end interface
  
  interface 
    subroutine psb_@X@_dia_csmv(alpha,a,x,beta,y,info,trans) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @TYPE@(@FKIND@), intent(in)          :: alpha, beta, x(:)
      @TYPE@(@FKIND@), intent(inout)       :: y(:)
      integer(psb_ipk_), intent(out)       :: info
      character, optional, intent(in)      :: trans
    end subroutine psb_@X@_dia_csmv
    subroutine psb_@X@_dia_csmm(alpha,a,x,beta,y,info,trans) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @TYPE@(@FKIND@), intent(in)          :: alpha, beta, x(:,:)
      @TYPE@(@FKIND@), intent(inout)       :: y(:,:)
      integer(psb_ipk_), intent(out)       :: info
      character, optional, intent(in)      :: trans
    end subroutine psb_@X@_dia_csmm
  end interface
  
  
  interface 
    function psb_@X@_dia_maxval(a) result(res)
      import :: psb_@X@_dia_sparse_mat, @FKIND@
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @RTYPE@(@FKIND@)         :: res
    end function psb_@X@_dia_maxval
  end interface
  
  interface 
    function psb_@X@_dia_csnmi(a) result(res)
      import :: psb_@X@_dia_sparse_mat, @FKIND@
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @RTYPE@(@FKIND@)         :: res
    end function psb_@X@_dia_csnmi
  end interface
  
  interface 
    function psb_@X@_dia_csnm1(a) result(res)
      import :: psb_@X@_dia_sparse_mat, @FKIND@
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @RTYPE@(@FKIND@)         :: res
    end function psb_@X@_dia_csnm1
  end interface

  interface 
    subroutine psb_@X@_dia_rowsum(d,a) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @TYPE@(@FKIND@), intent(out)              :: d(:)
    end subroutine psb_@X@_dia_rowsum
  end interface

  interface 
    subroutine psb_@X@_dia_arwsum(d,a) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @RTYPE@(@FKIND@), intent(out)              :: d(:)
    end subroutine psb_@X@_dia_arwsum
  end interface
  
  interface 
    subroutine psb_@X@_dia_colsum(d,a) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @TYPE@(@FKIND@), intent(out)              :: d(:)
    end subroutine psb_@X@_dia_colsum
  end interface

  interface 
    subroutine psb_@X@_dia_aclsum(d,a) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @RTYPE@(@FKIND@), intent(out)              :: d(:)
    end subroutine psb_@X@_dia_aclsum
  end interface
    
  interface 
    subroutine psb_@X@_dia_get_diag(a,d,info) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(in) :: a
      @TYPE@(@FKIND@), intent(out)     :: d(:)
      integer(psb_ipk_), intent(out)   :: info
    end subroutine psb_@X@_dia_get_diag
  end interface
  
  interface 
    subroutine psb_@X@_dia_scal(d,a,info,side) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      @TYPE@(@FKIND@), intent(in)      :: d(:)
      integer(psb_ipk_), intent(out)   :: info
      character, intent(in), optional  :: side
    end subroutine psb_@X@_dia_scal
  end interface
  
  interface
    subroutine psb_@X@_dia_scals(d,a,info) 
      import :: psb_@X@_dia_sparse_mat, @FKIND@, psb_ipk_
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      @TYPE@(@FKIND@), intent(in)      :: d
      integer(psb_ipk_), intent(out)   :: info
    end subroutine psb_@X@_dia_scals
  end interface
  
  interface  psi_convert_dia_from_coo
    subroutine psi_@X@_convert_dia_from_coo(a,tmp,info)
      import :: psb_@X@_dia_sparse_mat, psb_ipk_, psb_@X@_coo_sparse_mat
      implicit none 
      class(psb_@X@_dia_sparse_mat), intent(inout) :: a
      class(psb_@X@_coo_sparse_mat), intent(in)    :: tmp
      integer(psb_ipk_), intent(out)             :: info
    end subroutine psi_@X@_convert_dia_from_coo
  end interface


contains 

  ! == ===================================
  !
  !
  !
  ! Getters 
  !
  !
  !
  !
  !
  ! == ===================================

  
   function @X@_dia_sizeof(a) result(res)
     implicit none 
     class(psb_@X@_dia_sparse_mat), intent(in) :: a
     integer(psb_long_int_k_) :: res
     res = 8 
     res = res + @SIZET@  * size(a%data)
     res = res + psb_sizeof_int * size(a%offset)
     
   end function @X@_dia_sizeof

  function @X@_dia_get_fmt() result(res)
    implicit none 
    character(len=5) :: res
    res = 'DIA'
  end function @X@_dia_get_fmt
  
  function @X@_dia_get_nzeros(a) result(res)
    implicit none 
    class(psb_@X@_dia_sparse_mat), intent(in) :: a
    integer(psb_ipk_) :: res
    res = a%nzeros
  end function @X@_dia_get_nzeros

  ! function @X@_dia_get_size(a) result(res)
  !   implicit none 
  !   class(psb_@X@_dia_sparse_mat), intent(in) :: a
  !   integer(psb_ipk_) :: res

  !   res = -1
    
  !   if (allocated(a%ja)) then 
  !     if (res >= 0) then 
  !       res = min(res,size(a%ja))
  !     else 
  !       res = size(a%ja)
  !     end if
  !   end if
  !   if (allocated(a%val)) then 
  !     if (res >= 0) then 
  !       res = min(res,size(a%val))
  !     else 
  !       res = size(a%val)
  !     end if
  !   end if

  ! end function @X@_dia_get_size


  ! function  @X@_dia_get_nz_row(idx,a) result(res)

  !   implicit none
    
  !   class(psb_@X@_dia_sparse_mat), intent(in) :: a
  !   integer(psb_ipk_), intent(in)           :: idx
  !   integer(psb_ipk_)                       :: res
    
  !   res = 0 
 
  !   if ((1<=idx).and.(idx<=a%get_nrows())) then 
  !     res = a%irn(idx)
  !   end if
    
  ! end function @X@_dia_get_nz_row



  ! ! == ===================================
  ! !
  ! !
  ! !
  ! ! Data management
  ! !
  ! !
  ! !
  ! !
  ! !
  ! ! == ===================================  

  subroutine  @X@_dia_free(a) 
    implicit none 

    class(psb_@X@_dia_sparse_mat), intent(inout) :: a

    if (allocated(a%data)) deallocate(a%data)
    if (allocated(a%offset)) deallocate(a%offset)
    call a%set_null()
    call a%set_nrows(0)
    call a%set_ncols(0)
    
    return

  end subroutine @X@_dia_free


end module psb_@X@_dia_mat_mod

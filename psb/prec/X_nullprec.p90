module psb_@X@_nullprec

  use psb_@X@_base_prec_mod
  
  type, extends(psb_@X@_base_prec_type) :: psb_@X@_null_prec_type
  contains
    procedure, pass(prec) :: c_apply_v => psb_@X@_null_apply_vect
    procedure, pass(prec) :: c_apply   => psb_@X@_null_apply
    procedure, pass(prec) :: precbld   => psb_@X@_null_precbld
    procedure, pass(prec) :: precinit  => psb_@X@_null_precinit
    procedure, pass(prec) :: precseti  => psb_@X@_null_precseti
    procedure, pass(prec) :: precsetr  => psb_@X@_null_precsetr
    procedure, pass(prec) :: precsetc  => psb_@X@_null_precsetc
    procedure, pass(prec) :: precfree  => psb_@X@_null_precfree
    procedure, pass(prec) :: precdescr => psb_@X@_null_precdescr
    procedure, pass(prec) :: sizeof    => psb_@X@_null_sizeof
  end type psb_@X@_null_prec_type

  private :: psb_@X@_null_precbld, psb_@X@_null_precseti,&
       & psb_@X@_null_precsetr, psb_@X@_null_precsetc, psb_@X@_null_sizeof,&
       & psb_@X@_null_precinit, psb_@X@_null_precfree, psb_@X@_null_precdescr
  

  interface
    subroutine psb_@X@_null_apply_vect(alpha,prec,x,beta,y,desc_data,info,trans,work)
      import :: psb_ipk_, psb_desc_type, psb_@X@_null_prec_type, psb_@X@_vect_type, @FKIND@
      type(psb_desc_type),intent(in)       :: desc_data
      class(psb_@X@_null_prec_type), intent(inout)  :: prec
      type(psb_@X@_vect_type),intent(inout)  :: x
      @TYPE@(@FKIND@),intent(in)         :: alpha, beta
      type(psb_@X@_vect_type),intent(inout)  :: y
      integer(psb_ipk_), intent(out)                 :: info
      character(len=1), optional           :: trans
      @TYPE@(@FKIND@),intent(inout), optional, target :: work(:)
    end subroutine psb_@X@_null_apply_vect
  end interface
  
  interface
    subroutine psb_@X@_null_apply(alpha,prec,x,beta,y,desc_data,info,trans,work)
      import :: psb_ipk_, psb_desc_type, psb_@X@_null_prec_type, @FKIND@
      type(psb_desc_type),intent(in)       :: desc_data
      class(psb_@X@_null_prec_type), intent(in)  :: prec
      @TYPE@(@FKIND@),intent(inout)      :: x(:)
      @TYPE@(@FKIND@),intent(in)         :: alpha, beta
      @TYPE@(@FKIND@),intent(inout)      :: y(:)
      integer(psb_ipk_), intent(out)                 :: info
      character(len=1), optional           :: trans
      @TYPE@(@FKIND@),intent(inout), optional, target :: work(:)
    end subroutine psb_@X@_null_apply
  end interface
  
  
contains
  

  subroutine psb_@X@_null_precinit(prec,info)
    
    Implicit None
    
    class(psb_@X@_null_prec_type),intent(inout) :: prec
    integer(psb_ipk_), intent(out)                     :: info
    integer(psb_ipk_) :: err_act, nrow
    character(len=20)  :: name='@X@_null_precinit'

    call psb_erractionsave(err_act)

    info = psb_success_

    
    call psb_erractionrestore(err_act)
    return

9999 continue
    call psb_erractionrestore(err_act)
    if (err_act == psb_act_abort_) then
      call psb_error()
      return
    end if
    return
  end subroutine psb_@X@_null_precinit

  subroutine psb_@X@_null_precbld(a,desc_a,prec,info,upd,amold,afmt,vmold)
    
    Implicit None
    
    type(psb_@X@spmat_type), intent(in), target :: a
    type(psb_desc_type), intent(in), target   :: desc_a
    class(psb_@X@_null_prec_type),intent(inout) :: prec
    integer(psb_ipk_), intent(out)                      :: info
    character, intent(in), optional           :: upd
    character(len=*), intent(in), optional    :: afmt
    class(psb_@X@_base_sparse_mat), intent(in), optional :: amold
    class(psb_@X@_base_vect_type), intent(in), optional  :: vmold
    integer(psb_ipk_) :: err_act, nrow
    character(len=20)  :: name='@X@_null_precbld'

    call psb_erractionsave(err_act)

    info = psb_success_

    
    call psb_erractionrestore(err_act)
    return

9999 continue
    call psb_erractionrestore(err_act)
    if (err_act == psb_act_abort_) then
      call psb_error()
      return
    end if
    return
  end subroutine psb_@X@_null_precbld

  subroutine psb_@X@_null_precseti(prec,what,val,info)
    
    Implicit None
    
    class(psb_@X@_null_prec_type),intent(inout) :: prec
    integer(psb_ipk_), intent(in)                      :: what 
    integer(psb_ipk_), intent(in)                      :: val 
    integer(psb_ipk_), intent(out)                     :: info
    integer(psb_ipk_) :: err_act, nrow
    character(len=20)  :: name='@X@_null_precset'

    call psb_erractionsave(err_act)

    info = psb_success_
    
    call psb_erractionrestore(err_act)
    return

9999 continue
    call psb_erractionrestore(err_act)
    if (err_act == psb_act_abort_) then
      call psb_error()
      return
    end if
    return
  end subroutine psb_@X@_null_precseti

  subroutine psb_@X@_null_precsetr(prec,what,val,info)
    
    Implicit None
    
    class(psb_@X@_null_prec_type),intent(inout) :: prec
    integer(psb_ipk_), intent(in)                      :: what 
    real(@FKIND@), intent(in)               :: val 
    integer(psb_ipk_), intent(out)                     :: info
    integer(psb_ipk_) :: err_act, nrow
    character(len=20)  :: name='@X@_null_precset'

    call psb_erractionsave(err_act)

    info = psb_success_
    
    call psb_erractionrestore(err_act)
    return

9999 continue
    call psb_erractionrestore(err_act)
    if (err_act == psb_act_abort_) then
      call psb_error()
      return
    end if
    return
  end subroutine psb_@X@_null_precsetr

  subroutine psb_@X@_null_precsetc(prec,what,val,info)
    
    Implicit None
    
    class(psb_@X@_null_prec_type),intent(inout) :: prec
    integer(psb_ipk_), intent(in)                      :: what 
    character(len=*), intent(in)             :: val
    integer(psb_ipk_), intent(out)                     :: info
    integer(psb_ipk_) :: err_act, nrow
    character(len=20)  :: name='@X@_null_precset'

    call psb_erractionsave(err_act)

    info = psb_success_
    
    call psb_erractionrestore(err_act)
    return

9999 continue
    call psb_erractionrestore(err_act)
    if (err_act == psb_act_abort_) then
      call psb_error()
      return
    end if
    return
  end subroutine psb_@X@_null_precsetc

  subroutine psb_@X@_null_precfree(prec,info)
    
    Implicit None

    class(psb_@X@_null_prec_type), intent(inout) :: prec
    integer(psb_ipk_), intent(out)                :: info
    
    integer(psb_ipk_) :: err_act, nrow
    character(len=20)  :: name='@X@_null_precset'
    
    call psb_erractionsave(err_act)
    
    info = psb_success_
    
    call psb_erractionrestore(err_act)
    return

9999 continue
    call psb_erractionrestore(err_act)
    if (err_act == psb_act_abort_) then
      call psb_error()
      return
    end if
    return
    
  end subroutine psb_@X@_null_precfree
  

  subroutine psb_@X@_null_precdescr(prec,iout)
    
    Implicit None

    class(psb_@X@_null_prec_type), intent(in) :: prec
    integer(psb_ipk_), intent(in), optional    :: iout

    integer(psb_ipk_) :: err_act, nrow, info
    character(len=20)  :: name='@X@_null_precset'
    integer(psb_ipk_) :: iout_

    call psb_erractionsave(err_act)

    info = psb_success_
   
    if (present(iout)) then 
      iout_ = iout
    else
      iout_ = 6 
    end if

    write(iout_,*) 'No preconditioning'

    call psb_erractionrestore(err_act)
    return

9999 continue
    call psb_erractionrestore(err_act)
    if (err_act == psb_act_abort_) then
      call psb_error()
      return
    end if
    return
    
  end subroutine psb_@X@_null_precdescr

  function psb_@X@_null_sizeof(prec) result(val)

    class(psb_@X@_null_prec_type), intent(in) :: prec
    integer(psb_long_int_k_) :: val
    
    val = 0

    return
  end function psb_@X@_null_sizeof

end module psb_@X@_nullprec

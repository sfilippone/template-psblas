subroutine psb_d_hybg_scals(d,a,info) 
  
  use psb_base_mod
#ifdef HAVE_SPGPU
  use cusparse_mod
  use psb_d_hybg_mat_mod, psb_protect_name => psb_d_hybg_scals 
#else 
  use psb_d_hybg_mat_mod
#endif
  implicit none 
  class(psb_d_hybg_sparse_mat), intent(inout) :: a
  real(psb_dpk_), intent(in)      :: d
  integer, intent(out)            :: info

  Integer :: err_act,mnm, i, j, m, n, nz
  character(len=20)  :: name='scal'
  logical, parameter :: debug=.false.

  info  = psb_success_
  call psb_erractionsave(err_act)


  call a%psb_d_csr_sparse_mat%scal(d,info)

  if (info /= 0) goto 9999
  
#ifdef HAVE_SPGPU
  if (.not.c_associated(a%deviceMat%mat)) then 
    info = psb_err_invalid_mat_state_
    call psb_errpush(info,name)
    goto 9999
  endif
  m  = a%get_nrows()
  n  = a%get_nrows()
  nz = a%get_nzeros()
  info = HYBGHost2Device(a%deviceMat,m,n,nz,a%irp,a%ja,a%val)
  if (info /= 0) goto 9999
#endif

  call psb_erractionrestore(err_act)
  return

9999 continue
  call psb_erractionrestore(err_act)
  if (err_act == psb_act_abort_) then
    call psb_error()
    return
  end if
  return

end subroutine psb_d_hybg_scals

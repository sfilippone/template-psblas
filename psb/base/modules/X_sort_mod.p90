!!$ 
!!$              Parallel Sparse BLAS  version 3.4
!!$    (C) Copyright 2006, 2010, 2015
!!$                       Salvatore Filippone    University of Rome Tor Vergata
!!$                       Alfredo Buttari        CNRS-IRIT, Toulouse
!!$ 
!!$  Redistribution and use in source and binary forms, with or without
!!$  modification, are permitted provided that the following conditions
!!$  are met:
!!$    1. Redistributions of source code must retain the above copyright
!!$       notice, this list of conditions and the following disclaimer.
!!$    2. Redistributions in binary form must reproduce the above copyright
!!$       notice, this list of conditions, and the following disclaimer in the
!!$       documentation and/or other materials provided with the distribution.
!!$    3. The name of the PSBLAS group or the names of its contributors may
!!$       not be used to endorse or promote products derived from this
!!$       software without specific written permission.
!!$ 
!!$  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
!!$  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
!!$  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
!!$  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PSBLAS GROUP OR ITS CONTRIBUTORS
!!$  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
!!$  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
!!$  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
!!$  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
!!$  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
!!$  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
!!$  POSSIBILITY OF SUCH DAMAGE.
!!$ 
!!$  
!
!  Sorting routines
!  References:
!  D. Knuth
!  The Art of Computer Programming, vol. 3
!  Addison-Wesley
!  
!  Aho, Hopcroft, Ullman
!  Data Structures and Algorithms
!  Addison-Wesley
!
module psb_@X@_sort_mod
  use psb_const_mod

  @IS@
  interface psb_iblsrch
    function  psb_iblsrch(key,n,v) result(ipos)
      import :: psb_ipk_
      integer(psb_ipk_) :: ipos, key, n
      integer(psb_ipk_) :: v(:)
    end function psb_iblsrch
  end interface psb_iblsrch

  interface psb_ibsrch
    function  psb_ibsrch(key,n,v) result(ipos)
      import :: psb_ipk_
      integer(psb_ipk_) :: ipos, key, n
      integer(psb_ipk_) :: v(:)
    end function psb_ibsrch
  end interface psb_ibsrch

  interface psb_issrch
    function psb_issrch(key,n,v) result(ipos)
      import :: psb_ipk_
      implicit none
      integer(psb_ipk_) :: ipos, key, n
      integer(psb_ipk_) :: v(:)
    end function psb_issrch
  end interface psb_issrch

  interface psb_isaperm
    logical function psb_isaperm(n,eip)               
      import :: psb_ipk_
      integer(psb_ipk_), intent(in) :: n                             
      integer(psb_ipk_), intent(in) :: eip(n)
    end function psb_isaperm
  end interface psb_isaperm

  interface psb_msort_unique
    subroutine psb_imsort_u(x,nout,dir)
      import :: psb_ipk_, psb_spk_, psb_dpk_
      integer(psb_ipk_), intent(inout)           :: x(:) 
      integer(psb_ipk_), intent(out)             :: nout
      integer(psb_ipk_), optional, intent(in)    :: dir
    end subroutine psb_imsort_u
  end interface psb_msort_unique
  @IE@

  type psb_@X@_heap
    integer(psb_ipk_) :: last, dir
    @TYPE@(@FKIND@), allocatable    :: keys(:)
  contains
    procedure, pass(heap) :: init       => psb_@X@_init_heap
    procedure, pass(heap) :: howmany    => psb_@X@_howmany
    procedure, pass(heap) :: insert     => psb_@X@_insert_heap
    procedure, pass(heap) :: get_first  => psb_@X@_heap_get_first
    procedure, pass(heap) :: dump       => psb_@X@_dump_heap
    procedure, pass(heap) :: free       => psb_@X@_free_heap   
  end type psb_@X@_heap

  type psb_@X@_idx_heap
    integer(psb_ipk_) :: last, dir
    @TYPE@(@FKIND@), allocatable    :: keys(:)
    integer(psb_ipk_), allocatable :: idxs(:)
  contains
    procedure, pass(heap) :: init       => psb_@X@_idx_init_heap
    procedure, pass(heap) :: howmany    => psb_@X@_idx_howmany
    procedure, pass(heap) :: insert     => psb_@X@_idx_insert_heap
    procedure, pass(heap) :: get_first  => psb_@X@_idx_heap_get_first
    procedure, pass(heap) :: dump       => psb_@X@_idx_dump_heap
    procedure, pass(heap) :: free       => psb_@X@_idx_free_heap   
  end type psb_@X@_idx_heap


  interface psb_msort
    subroutine psb_@X@msort(x,ix,dir,flag)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(psb_ipk_), optional, intent(in)    :: dir, flag
      integer(psb_ipk_), optional, intent(inout) :: ix(:)
    end subroutine psb_@X@msort
  end interface psb_msort

  interface psb_qsort
    subroutine psb_@X@qsort(x,ix,dir,flag)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(psb_ipk_), optional, intent(in)    :: dir, flag
      integer(psb_ipk_), optional, intent(inout) :: ix(:)
    end subroutine psb_@X@qsort
  end interface psb_qsort
  
  interface psb_isort
    subroutine psb_@X@isort(x,ix,dir,flag)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(psb_ipk_), optional, intent(in)    :: dir, flag
      integer(psb_ipk_), optional, intent(inout) :: ix(:)
    end subroutine psb_@X@isort
  end interface psb_isort


  interface psb_hsort
    subroutine psb_@X@hsort(x,ix,dir,flag)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(psb_ipk_), optional, intent(in)    :: dir, flag
      integer(psb_ipk_), optional, intent(inout) :: ix(:)
    end subroutine psb_@X@hsort
  end interface psb_hsort


  interface psb_howmany_heap
    function  psb_@X@_howmany(heap) result(res)
      import 
      class(psb_@X@_heap), intent(in) :: heap
      integer(psb_ipk_) :: res
    end function psb_@X@_howmany
    function  psb_@X@_idx_howmany(heap) result(res)
      import 
      class(psb_@X@_idx_heap), intent(in) :: heap
      integer(psb_ipk_) :: res
    end function psb_@X@_idx_howmany
  end interface psb_howmany_heap


  interface psb_init_heap
    subroutine psb_@X@_init_heap(heap,info,dir)
      import 
      class(psb_@X@_heap), intent(inout) :: heap
      integer(psb_ipk_), intent(out)            :: info
      integer(psb_ipk_), intent(in), optional   :: dir
    end subroutine psb_@X@_init_heap
    subroutine psb_@X@_idx_init_heap(heap,info,dir)
      import 
      class(psb_@X@_idx_heap), intent(inout) :: heap
      integer(psb_ipk_), intent(out)            :: info
      integer(psb_ipk_), intent(in), optional   :: dir
    end subroutine psb_@X@_idx_init_heap
  end interface psb_init_heap


  interface psb_dump_heap
    subroutine psb_@X@_dump_heap(iout,heap,info)
      import 
      class(psb_@X@_heap), intent(in) :: heap
      integer(psb_ipk_), intent(out)           :: info
      integer(psb_ipk_), intent(in)            :: iout
    end subroutine psb_@X@_dump_heap
    subroutine psb_dump_@X@_idx_heap(iout,heap,info)
      import
      class(psb_@X@_idx_heap), intent(in) :: heap
      integer(psb_ipk_), intent(out)           :: info
      integer(psb_ipk_), intent(in)            :: iout
    end subroutine psb_dump_@X@_idx_heap
  end interface psb_dump_heap


  interface psb_insert_heap
    subroutine psb_@X@_insert_heap(key,heap,info)
      import
      @TYPE@(@FKIND@), intent(in)               :: key
      class(psb_@X@_heap), intent(inout) :: heap
      integer(psb_ipk_), intent(out)              :: info
    end subroutine psb_@X@_insert_heap
    subroutine psb_@X@_idx_insert_heap(key,index,heap,info)
      import
      @TYPE@(@FKIND@), intent(in)               :: key
      integer(psb_ipk_), intent(in)                   :: index
      class(psb_@X@_idx_heap), intent(inout) :: heap
      integer(psb_ipk_), intent(out)              :: info
    end subroutine psb_@X@_idx_insert_heap
  end interface psb_insert_heap

  interface psb_heap_get_first
    subroutine psb_@X@_heap_get_first(key,heap,info)
      import 
      class(psb_@X@_heap), intent(inout) :: heap
      @TYPE@(@FKIND@), intent(out)              :: key
      integer(psb_ipk_), intent(out)              :: info
    end subroutine psb_@X@_heap_get_first
    subroutine psb_@X@_idx_heap_get_first(key,index,heap,info)
      import 
      class(psb_@X@_idx_heap), intent(inout) :: heap
      @TYPE@(@FKIND@), intent(out)              :: key
      integer(psb_ipk_), intent(out)              :: index
      integer(psb_ipk_), intent(out)              :: info
    end subroutine psb_@X@_idx_heap_get_first
  end interface psb_heap_get_first

  interface 
    subroutine psi_@X@_insert_heap(key,last,heap,dir,info)
      import 
      implicit none 

      !  
      ! Input: 
      !   key:  the new value
      !   last: pointer to the last occupied element in heap
      !   heap: the heap
      !   dir:  sorting direction

      @TYPE@(@FKIND@), intent(in)     :: key
      @TYPE@(@FKIND@), intent(inout)  :: heap(:)
      integer(psb_ipk_), intent(in)     :: dir
      integer(psb_ipk_), intent(inout)  :: last
      integer(psb_ipk_), intent(out)    :: info
    end subroutine psi_@X@_insert_heap
  end interface

  interface 
    subroutine psi_@X@_idx_insert_heap(key,index,last,heap,idxs,dir,info)
      import 
      implicit none 

      !  
      ! Input: 
      !   key:  the new value
      !   last: pointer to the last occupied element in heap
      !   heap: the heap
      !   dir:  sorting direction

      @TYPE@(@FKIND@), intent(in)     :: key
      @TYPE@(@FKIND@), intent(inout)  :: heap(:)
      integer(psb_ipk_), intent(in)     :: index
      integer(psb_ipk_), intent(in)     :: dir
      integer(psb_ipk_), intent(inout)  :: idxs(:)
      integer(psb_ipk_), intent(inout)  :: last
      integer(psb_ipk_), intent(out)    :: info
    end subroutine psi_@X@_idx_insert_heap
  end interface


  interface 
    subroutine psi_@X@_heap_get_first(key,last,heap,dir,info)
      import 
      implicit none 
      @TYPE@(@FKIND@), intent(inout)  :: key
      integer(psb_ipk_), intent(inout)  :: last
      integer(psb_ipk_), intent(in)     :: dir
      @TYPE@(@FKIND@), intent(inout)  :: heap(:)
      integer(psb_ipk_), intent(out)    :: info
    end subroutine psi_@X@_heap_get_first
  end interface

  interface 
    subroutine psi_@X@_idx_heap_get_first(key,index,last,heap,idxs,dir,info)
      import
      @TYPE@(@FKIND@), intent(inout)    :: key
      integer(psb_ipk_), intent(out)    :: index
      @TYPE@(@FKIND@), intent(inout)    :: heap(:)
      integer(psb_ipk_), intent(in)     :: dir
      integer(psb_ipk_), intent(inout)  :: last
      integer(psb_ipk_), intent(inout)  :: idxs(:)
      integer(psb_ipk_), intent(out)    :: info
    end subroutine psi_@X@_idx_heap_get_first
  end interface

  interface 
    subroutine psi_@X@isortx(n,x,ix,dir)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(psb_ipk_), intent(in)    :: dir
      integer(psb_ipk_), intent(inout) :: ix(:)
    end subroutine psi_@X@isortx
    subroutine psi_@X@isort(n,x,dir)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(psb_ipk_), intent(in)    :: dir
    end subroutine psi_@X@isort
  end interface
  
  interface psb_free_heap
    module procedure psb_free_@X@_heap, psb_free_@X@_idx_heap
  end interface psb_free_heap

contains

  subroutine psb_@X@_init_heap(heap,info,dir)
    use psb_realloc_mod, only : psb_ensure_size
    implicit none 
    class(psb_@X@_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)            :: info
    integer(psb_ipk_), intent(in), optional   :: dir

    info = psb_success_
    heap%last=0
    if (present(dir)) then 
      heap%dir = dir
    else
      @CS@
      heap%dir = psb_asort_up_
      @CE@
      @NOTCS@
      heap%dir = psb_sort_up_
      @NOTCE@
    endif
    select case(heap%dir) 
      @CS@
    case (psb_asort_up_,psb_asort_down_)
      ! ok, do nothing
    case default
      write(psb_err_unit,*) 'Invalid direction, defaulting to psb_asort_up_'
      heap%dir = psb_asort_up_
      @CE@
      @NOTCS@
    case (psb_sort_up_,psb_sort_down_,psb_asort_up_,psb_asort_down_)
      ! ok, do nothing
    case default
      write(psb_err_unit,*) 'Invalid direction, defaulting to psb_sort_up_'
      heap%dir = psb_sort_up_
      @NOTCE@
    end select
    call psb_ensure_size(psb_heap_resize,heap%keys,info)

    return
  end subroutine psb_@X@_init_heap


  function psb_@X@_howmany(heap) result(res)
    implicit none 
    class(psb_scomplex_heap), intent(in) :: heap
    integer(psb_ipk_) :: res
    res  = heap%last
  end function psb_@X@_howmany

  subroutine psb_@X@_insert_heap(key,heap,info)
    use psb_realloc_mod, only : psb_ensure_size
    implicit none 

    @TYPE@(@FKIND), intent(in)              :: key
    class(psb_@X@_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)                       :: info

    info = psb_success_
    if (heap%last < 0) then 
      write(psb_err_unit,*) 'Invalid last in heap ',heap%last
      info = heap%last
      return
    endif

    call psb_ensure_size(heap%last+1,heap%keys,info,addsz=psb_heap_resize)
    if (info /= psb_success_) then 
      write(psb_err_unit,*) 'Memory allocation failure in heap_insert'
      info = -5
      return
    end if
    call psi_@X@_insert_heap(key,index,&
         & heap%last,heap%keys,heap%dir,info)

    return
  end subroutine psb_@X@_insert_heap

  subroutine psb_@X@_heap_get_first(key,heap,info)
    implicit none 

    class(psb_@X@_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)       :: index,info
    @TYPE@(@FKIND), intent(out)           :: key


    info = psb_success_

    call psi_@X@_heap_get_first(key,index,&
         & heap%last,heap%keys,heap%dir,info)

    return
  end subroutine psb_@X@_heap_get_first

  subroutine psb_@X@_dump_heap(iout,heap,info)

    implicit none 
    class(psb_@X@_heap), intent(in) :: heap
    integer(psb_ipk_), intent(out)    :: info
    integer(psb_ipk_), intent(in)     :: iout

    info = psb_success_
    if (iout < 0) then
      write(psb_err_unit,*) 'Invalid file '
      info =-1
      return
    end if

    write(iout,*) 'Heap direction ',heap%dir
    write(iout,*) 'Heap size      ',heap%last
    if ((heap%last > 0).and.((.not.allocated(heap%keys)).or.&
         & (size(heap%keys)<heap%last))) then
      write(iout,*) 'Inconsistent size/allocation status!!'
    else
      write(iout,*) heap%keys(1:heap%last)
    end if
  end subroutine psb_@X@_dump_heap

  subroutine psb_free_@X@_heap(heap,info)
    implicit none 
    class(psb_@X@_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)           :: info

    info=psb_success_
    if (allocated(heap%keys)) deallocate(heap%keys,stat=info)

  end subroutine psb_free_@X@_heap

  subroutine psb_@X@_idx_init_heap(heap,info,dir)
    use psb_realloc_mod, only : psb_ensure_size
    implicit none 
    class(psb_@X@_idx_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)            :: info
    integer(psb_ipk_), intent(in), optional   :: dir

    info = psb_success_
    heap%last=0
    if (present(dir)) then 
      heap%dir = dir
    else
      @CS@
      heap%dir = psb_asort_up_
      @CE@
      @NOTCS@
      heap%dir = psb_sort_up_
      @NOTCE@
    endif
    select case(heap%dir) 
      @CS@
    case (psb_asort_up_,psb_asort_down_)
      ! ok, do nothing
    case default
      write(psb_err_unit,*) 'Invalid direction, defaulting to psb_asort_up_'
      heap%dir = psb_asort_up_
      @CE@
      @NOTCS@
    case (psb_sort_up_,psb_sort_down_,psb_asort_up_,psb_asort_down_)
      ! ok, do nothing
    case default
      write(psb_err_unit,*) 'Invalid direction, defaulting to psb_sort_up_'
      heap%dir = psb_sort_up_
      @NOTCE@
    end select

    call psb_ensure_size(psb_heap_resize,heap%keys,info)
    call psb_ensure_size(psb_heap_resize,heap%idxs,info)
    return
  end subroutine psb_@X@_idx_init_heap


  function psb_@X@_idx_howmany(heap) result(res)
    implicit none 
    class(psb_scomplex_idx_heap), intent(in) :: heap
    integer(psb_ipk_) :: res
    res  = heap%last
  end function psb_@X@_idx_howmany

  subroutine psb_@X@_idx_insert_heap(key,index,heap,info)
    use psb_realloc_mod, only : psb_ensure_size
    implicit none 

    @TYPE@(@FKIND), intent(in)              :: key
    integer(psb_ipk_), intent(in)                        :: index
    class(psb_@X@_idx_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)                       :: info

    info = psb_success_
    if (heap%last < 0) then 
      write(psb_err_unit,*) 'Invalid last in heap ',heap%last
      info = heap%last
      return
    endif

    call psb_ensure_size(heap%last+1,heap%keys,info,addsz=psb_heap_resize)
    if (info == psb_success_) &
         & call psb_ensure_size(heap%last+1,heap%idxs,info,addsz=psb_heap_resize)
    if (info /= psb_success_) then 
      write(psb_err_unit,*) 'Memory allocation failure in heap_insert'
      info = -5
      return
    end if
    call psi_@X@_idx_insert_heap(key,index,&
         & heap%last,heap%keys,heap%idxs,heap%dir,info)

    return
  end subroutine psb_@X@_idx_insert_heap

  subroutine psb_@X@_idx_heap_get_first(key,index,heap,info)
    implicit none 

    class(psb_@X@_idx_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)       :: index,info
    @TYPE@(@FKIND), intent(out)           :: key


    info = psb_success_

    call psi_@X@_idx_heap_get_first(key,index,&
         & heap%last,heap%keys,heap%idxs,heap%dir,info)

    return
  end subroutine psb_@X@_idx_heap_get_first

  subroutine psb_@X@_idx_dump_heap(iout,heap,info)

    implicit none 
    class(psb_@X@_idx_heap), intent(in) :: heap
    integer(psb_ipk_), intent(out)    :: info
    integer(psb_ipk_), intent(in)     :: iout

    info = psb_success_
    if (iout < 0) then
      write(psb_err_unit,*) 'Invalid file '
      info =-1
      return
    end if

    write(iout,*) 'Heap direction ',heap%dir
    write(iout,*) 'Heap size      ',heap%last
    if ((heap%last > 0).and.((.not.allocated(heap%keys)).or.&
         & (size(heap%keys)<heap%last))) then
      write(iout,*) 'Inconsistent size/allocation status!!'
    else    if ((heap%last > 0).and.((.not.allocated(heap%idxs)).or.&
         & (size(heap%idxs)<heap%last))) then
      write(iout,*) 'Inconsistent size/allocation status!!'
    else
      write(iout,*) heap%keys(1:heap%last)
      write(iout,*) heap%idxs(1:heap%last)
    end if
  end subroutine psb_@X@_idx_dump_heap

  subroutine psb_free_@X@_idx_heap(heap,info)
    implicit none 
    class(psb_@X@_idx_heap), intent(inout) :: heap
    integer(psb_ipk_), intent(out)           :: info

    info=psb_success_
    if (allocated(heap%keys)) deallocate(heap%keys,stat=info)
    if ((info == psb_success_).and.(allocated(heap%idxs))) deallocate(heap%idxs,stat=info)

  end subroutine psb_free_@X@_idx_heap

end module psb_@X@_sort_mod

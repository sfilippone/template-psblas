module psi_@X@_serial_mod
  @IS@
  use psb_const_mod, only : psb_ipk_
  @IE@
  @NOTIS@
  use psb_const_mod, only : psb_ipk_, @FKIND@
  @NOTIE@

  interface psb_gelp
    ! 2-D version
    subroutine psb_@X@gelp(trans,iperm,x,info)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none 
      @TYPE@(@FKIND@), intent(inout)     ::  x(:,:)
      integer(psb_ipk_), intent(in)      ::  iperm(:)
      integer(psb_ipk_), intent(out)     ::  info
      character, intent(in)              :: trans
    end subroutine psb_@X@gelp
    subroutine psb_@X@gelpv(trans,iperm,x,info)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none 
      @TYPE@(@FKIND@), intent(inout)     ::  x(:)
      integer(psb_ipk_), intent(in)      ::  iperm(:)
      integer(psb_ipk_), intent(out)     ::  info
      character, intent(in)              :: trans
    end subroutine psb_@X@gelpv
  end interface psb_gelp
  
  interface psb_geaxpby 
    subroutine psi_@X@axpby(m,n,alpha, x, beta, y, info)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none 
      integer(psb_ipk_), intent(in)      :: m, n
      @TYPE@(@FKIND@), intent (in)       ::  x(:,:)
      @TYPE@(@FKIND@), intent (inout)    ::  y(:,:)
      @TYPE@(@FKIND@), intent (in)       ::  alpha, beta
      integer(psb_ipk_), intent(out)     :: info
    end subroutine psi_@X@axpby
    subroutine psi_@X@axpbyv(m,alpha, x, beta, y, info)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none 
      integer(psb_ipk_), intent(in)      :: m
      @TYPE@(@FKIND@), intent (in)       ::  x(:)
      @TYPE@(@FKIND@), intent (inout)    ::  y(:)
      @TYPE@(@FKIND@), intent (in)       :: alpha, beta
      integer(psb_ipk_), intent(out)     :: info
    end subroutine psi_@X@axpbyv
  end interface psb_geaxpby

  interface psi_gth
    subroutine psi_@X@gthmv(n,k,idx,alpha,x,beta,y)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: x(:,:), y(:),alpha,beta
    end subroutine psi_@X@gthmv
    subroutine psi_@X@gthv(n,idx,alpha,x,beta,y)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none
      integer(psb_ipk_) :: n, idx(:)
      @TYPE@(@FKIND@) :: x(:), y(:),alpha,beta
    end subroutine psi_@X@gthv
    subroutine psi_@X@gthzmv(n,k,idx,x,y)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: x(:,:), y(:)
      
    end subroutine psi_@X@gthzmv
    subroutine psi_@X@gthzv(n,idx,x,y)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none 
      integer(psb_ipk_) :: n, idx(:)
      @TYPE@(@FKIND@) :: x(:), y(:)
    end subroutine psi_@X@gthzv
  end interface psi_gth

  interface psi_sct
    subroutine psi_@X@sctmv(n,k,idx,x,beta,y)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: beta, x(:), y(:,:)
    end subroutine psi_@X@sctmv
    subroutine psi_@X@sctv(n,idx,x,beta,y)
      @IS@
      import :: psb_ipk_
      @IE@
      @NOTIS@
      import :: psb_ipk_, @FKIND@
      @NOTIE@
      implicit none
      
      integer(psb_ipk_) :: n, idx(:)
      @TYPE@(@FKIND@) :: beta, x(:), y(:)
    end subroutine psi_@X@sctv
  end interface psi_sct

end module psi_@X@_serial_mod

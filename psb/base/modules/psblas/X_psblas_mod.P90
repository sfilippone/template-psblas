!
!                Parallel Sparse BLAS  version 3.5
!      (C) Copyright 2006-2018
!        Salvatore Filippone
!        Alfredo Buttari
!
!    Redistribution and use in source and binary forms, with or without
!    modification, are permitted provided that the following conditions
!    are met:
!      1. Redistributions of source code must retain the above copyright
!         notice, this list of conditions and the following disclaimer.
!      2. Redistributions in binary form must reproduce the above copyright
!         notice, this list of conditions, and the following disclaimer in the
!         documentation and/or other materials provided with the distribution.
!      3. The name of the PSBLAS group or the names of its contributors may
!         not be used to endorse or promote products derived from this
!         software without specific written permission.
!
!    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
!    ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
!    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
!    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PSBLAS GROUP OR ITS CONTRIBUTORS
!    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
!    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
!    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
!    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
!    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
!    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
!    POSSIBILITY OF SUCH DAMAGE.
!
!
module psb_@X@_psblas_mod
  use psb_desc_mod, only : psb_desc_type, @FKIND@, psb_ipk_, psb_lpk_
  use psb_@X@_vect_mod, only : psb_@X@_vect_type
  use psb_@X@_mat_mod, only : psb_@X@spmat_type

  interface psb_gedot
    function psb_@X@dot_vect(x, y, desc_a,info,global) result(res)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@)                    :: res
      type(psb_@X@_vect_type), intent(inout) :: x, y
      type(psb_desc_type), intent(in)      :: desc_a
      integer(psb_ipk_), intent(out)       :: info
      logical, intent(in), optional        :: global
    end function psb_@X@dot_vect
    function psb_@X@dotv(x, y, desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@)                :: psb_@X@dotv
      @TYPE@(@FKIND@), intent(in)    :: x(:), y(:)
      type(psb_desc_type), intent(in)    :: desc_a
      integer(psb_ipk_), intent(out)     :: info
      logical, intent(in), optional      :: global
    end function psb_@X@dotv
    function psb_@X@dot(x, y, desc_a, info, jx, jy,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@)                :: psb_@X@dot
      @TYPE@(@FKIND@), intent(in)    :: x(:,:), y(:,:)
      type(psb_desc_type), intent(in)    :: desc_a
      integer(psb_ipk_), optional, intent(in)      :: jx, jy
      integer(psb_ipk_), intent(out)     :: info
      logical, intent(in), optional      :: global
    end function psb_@X@dot
  end interface


  interface psb_gedots
    subroutine  psb_@X@dotvs(res,x, y, desc_a, info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@), intent(out)      :: res
      @TYPE@(@FKIND@), intent(in)       :: x(:), y(:)
      type(psb_desc_type), intent(in)    :: desc_a
      integer(psb_ipk_), intent(out)     :: info
      logical, intent(in), optional      :: global
    end subroutine psb_@X@dotvs
    subroutine  psb_@X@mdots(res,x, y, desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@), intent(out)      :: res(:)
      @TYPE@(@FKIND@), intent(in)       :: x(:,:), y(:,:)
      type(psb_desc_type), intent(in)    :: desc_a
      integer(psb_ipk_), intent(out)     :: info
      logical, intent(in), optional      :: global
    end subroutine psb_@X@mdots
  end interface

  interface psb_geaxpby
    subroutine psb_@X@axpby_vect(alpha, x, beta, y,&
         & desc_a, info)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      @TYPE@(@FKIND@), intent (in)        :: alpha, beta
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end subroutine psb_@X@axpby_vect
    subroutine psb_@X@axpby_vect_out(alpha, x, beta, y,&
         & z, desc_a, info)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_@X@_vect_type), intent (inout) :: z
      @TYPE@(@FKIND@), intent (in)        :: alpha, beta
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end subroutine psb_@X@axpby_vect_out
    subroutine psb_@X@axpbyv(alpha, x, beta, y,&
         & desc_a, info)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@), intent (in)       ::  x(:)
      @TYPE@(@FKIND@), intent (inout)    ::  y(:)
      @TYPE@(@FKIND@), intent (in)       :: alpha, beta
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)                :: info
    end subroutine psb_@X@axpbyv
    subroutine psb_@X@axpbyvout(alpha, x, beta, y,&
         & z, desc_a, info)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@), intent (in)       ::  x(:)
      @TYPE@(@FKIND@), intent (in)       ::  y(:)
      @TYPE@(@FKIND@), intent (inout)    ::  z(:)
      @TYPE@(@FKIND@), intent (in)       :: alpha, beta
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)                :: info
    end subroutine psb_@X@axpbyvout
    subroutine psb_@X@axpby(alpha, x, beta, y,&
         & desc_a, info, n, jx, jy)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @TYPE@(@FKIND@), intent (in)       ::  x(:,:)
      @TYPE@(@FKIND@), intent (inout)    ::  y(:,:)
      @TYPE@(@FKIND@), intent (in)       ::  alpha, beta
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), optional, intent(in) :: n, jx, jy
      integer(psb_ipk_), intent(out)      :: info
    end subroutine psb_@X@axpby
  end interface

  interface psb_geamax
    function psb_@X@amax(x, desc_a, info, jx,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)   psb_@X@amax
      @TYPE@(@FKIND@), intent (in)       :: x(:,:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), optional, intent (in)      :: jx
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end function psb_@X@amax
    function psb_@X@amaxv(x, desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@) psb_@X@amaxv
      @TYPE@(@FKIND@), intent (in)       :: x(:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end function psb_@X@amaxv
    function psb_@X@amax_vect(x, desc_a, info,global) result(res)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                        :: res
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_desc_type), intent (in)     :: desc_a
      integer(psb_ipk_), intent(out)       :: info
      logical, intent(in), optional        :: global
    end function psb_@X@amax_vect
  end interface

#if ! defined(HAVE_BUGGY_GENERICS)
  interface psb_genrmi
    procedure psb_@X@amax, psb_@X@amaxv, psb_@X@amax_vect
  end interface
  interface psb_normi
    procedure psb_@X@amax, psb_@X@amaxv, psb_@X@amax_vect
  end interface
#endif

  interface psb_geamaxs
    subroutine  psb_@X@amaxvs(res,x,desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@), intent (out)      :: res
      @TYPE@(@FKIND@), intent (in)    :: x(:)
      type(psb_desc_type), intent (in)  :: desc_a
      integer(psb_ipk_), intent(out)    :: info
      logical, intent(in), optional     :: global
    end subroutine psb_@X@amaxvs
    subroutine  psb_@X@mamaxs(res,x,desc_a,info,jx,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@), intent (out)       :: res(:)
      @TYPE@(@FKIND@), intent (in)     :: x(:,:)
      type(psb_desc_type), intent (in)   :: desc_a
      integer(psb_ipk_), intent(out)     :: info
      integer(psb_ipk_), optional, intent(in)      :: jx
      logical, intent(in), optional      :: global
    end subroutine psb_@X@mamaxs
  end interface

  @NOTCPLXS@
  interface psb_gemin
    function psb_@X@min_vect(x, desc_a, info,global) result(res)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                        :: res
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_desc_type), intent (in)     :: desc_a
      integer(psb_ipk_), intent(out)       :: info
      logical, intent(in), optional        :: global
    end function psb_@X@min_vect
  end interface
  @NOTCPLXE@

  interface psb_geasum
    function psb_@X@asum_vect(x, desc_a, info,global) result(res)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                        :: res
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_desc_type), intent (in)     :: desc_a
      integer(psb_ipk_), intent(out)       :: info
      logical, intent(in), optional        :: global
    end function psb_@X@asum_vect
    function psb_@X@asum(x, desc_a, info, jx,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)   psb_@X@asum
      @TYPE@(@FKIND@), intent (in)       :: x(:,:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), optional, intent (in)      :: jx
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end function psb_@X@asum
    function psb_@X@asumv(x, desc_a, info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@) psb_@X@asumv
      @TYPE@(@FKIND@), intent (in)       :: x(:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end function psb_@X@asumv
  end interface

  interface psb_geasums
    subroutine  psb_@X@asumvs(res,x,desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@), intent (out)      :: res
      @TYPE@(@FKIND@), intent (in)       :: x(:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end subroutine psb_@X@asumvs
    subroutine  psb_@X@masum(res,x,desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@), intent (out)      :: res(:)
      @TYPE@(@FKIND@), intent (in)       :: x(:,:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end subroutine psb_@X@masum
  end interface

#if ! defined(HAVE_BUGGY_GENERICS)
  interface psb_genrm1
    procedure psb_@X@asum, psb_@X@asumv, psb_@X@asum_vect
  end interface
  interface psb_norm1
    procedure psb_@X@asum, psb_@X@asumv, psb_@X@asum_vect
  end interface
#endif

  interface psb_genrm2
    function psb_@X@nrm2(x, desc_a, info, jx,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)   psb_@X@nrm2
      @TYPE@(@FKIND@), intent (in)       :: x(:,:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), optional, intent (in)      :: jx
      integer(psb_ipk_), intent(out)       :: info
      logical, intent(in), optional        :: global
    end function psb_@X@nrm2
    function psb_@X@nrm2v(x, desc_a, info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@) psb_@X@nrm2v
      @TYPE@(@FKIND@), intent (in)       :: x(:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)                :: info
      logical, intent(in), optional        :: global
    end function psb_@X@nrm2v
    function psb_@X@nrm2_vect(x, desc_a, info,global) result(res)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                      :: res
      type(psb_@X@_vect_type), intent (inout)   :: x
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end function psb_@X@nrm2_vect
    function psb_@X@nrm2_weight_vect(x,w, desc_a, info,global) result(res)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                      :: res
      type(psb_@X@_vect_type), intent (inout)   :: x
      type(psb_@X@_vect_type), intent (inout)   :: w
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end function psb_@X@nrm2_weight_vect
    function psb_@X@nrm2_weightmask_vect(x,w,idv, desc_a, info,global) result(res)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                      :: res
      type(psb_@X@_vect_type), intent (inout)   :: x
      type(psb_@X@_vect_type), intent (inout)   :: w
      type(psb_@X@_vect_type), intent (inout)   :: idv
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end function psb_@X@nrm2_weightmask_vect
  end interface

#if ! defined(HAVE_BUGGY_GENERICS)
  interface psb_norm2
    procedure psb_@X@nrm2, psb_@X@nrm2v, psb_@X@nrm2_vect, psb_@X@nrm2_weight_vect, psb_@X@nrm2_weightmask_vect
  end interface
#endif

  interface psb_genrm2s
    subroutine  psb_@X@nrm2vs(res,x,desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@), intent (out)      :: res
      @TYPE@(@FKIND@), intent (in)       :: x(:)
      type(psb_desc_type), intent (in)    :: desc_a
      integer(psb_ipk_), intent(out)      :: info
      logical, intent(in), optional       :: global
    end subroutine psb_@X@nrm2vs
  end interface


  interface psb_spnrmi
    function psb_@X@nrmi(a, desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                    :: psb_@X@nrmi
      type(psb_@X@spmat_type), intent (in) :: a
      type(psb_desc_type), intent (in)   :: desc_a
      integer(psb_ipk_), intent(out)     :: info
      logical, intent(in), optional      :: global
    end function psb_@X@nrmi
  end interface

#if ! defined(HAVE_BUGGY_GENERICS)
  interface psb_normi
    procedure psb_@X@nrmi
  end interface
#endif

  interface psb_spnrm1
    function psb_@X@spnrm1(a, desc_a,info,global)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      @RTYPE@(@FKIND@)                     :: psb_@X@spnrm1
      type(psb_@X@spmat_type), intent (in) :: a
      type(psb_desc_type), intent (in)     :: desc_a
      integer(psb_ipk_), intent(out)       :: info
      logical, intent(in), optional        :: global
    end function psb_@X@spnrm1
  end interface

#if ! defined(HAVE_BUGGY_GENERICS)
  interface psb_norm1
    procedure psb_@X@spnrm1
  end interface
#endif

  interface psb_spmm
    subroutine psb_@X@spmm(alpha, a, x, beta, y, desc_a, info,&
         &trans, k, jx, jy,work,doswap)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@spmat_type), intent(in)        :: a
      @TYPE@(@FKIND@), intent(inout), target :: x(:,:)
      @TYPE@(@FKIND@), intent(inout), target :: y(:,:)
      @TYPE@(@FKIND@), intent(in)            :: alpha, beta
      type(psb_desc_type), intent(in)          :: desc_a
      character, optional, intent(in)          :: trans
      @TYPE@(@FKIND@), optional, intent(inout),target :: work(:)
      integer(psb_ipk_), optional, intent(in)        :: k, jx, jy
      logical, optional, intent(in)        :: doswap
      integer(psb_ipk_), intent(out)                 :: info
    end subroutine psb_@X@spmm
    subroutine psb_@X@spmv(alpha, a, x, beta, y,&
         & desc_a, info, trans, work,doswap)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@spmat_type), intent(in)        :: a
      @TYPE@(@FKIND@), intent(inout), target :: x(:)
      @TYPE@(@FKIND@), intent(inout), target :: y(:)
      @TYPE@(@FKIND@), intent(in)            :: alpha, beta
      type(psb_desc_type), intent(in)          :: desc_a
      character, optional, intent(in)          :: trans
      @TYPE@(@FKIND@), optional, intent(inout),target :: work(:)
      logical, optional, intent(in)        :: doswap
      integer(psb_ipk_), intent(out)                 :: info
    end subroutine psb_@X@spmv
    subroutine psb_@X@spmv_vect(alpha, a, x, beta, y,&
         & desc_a, info, trans, work,doswap)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@spmat_type), intent(in)    :: a
      type(psb_@X@_vect_type), intent(inout) :: x
      type(psb_@X@_vect_type), intent(inout) :: y
      @TYPE@(@FKIND@), intent(in)        :: alpha, beta
      type(psb_desc_type), intent(in)      :: desc_a
      character, optional, intent(in)      :: trans
      @TYPE@(@FKIND@), optional, intent(inout),target :: work(:)
      logical, optional, intent(in)        :: doswap
      integer(psb_ipk_), intent(out)                 :: info
    end subroutine psb_@X@spmv_vect
  end interface

  interface psb_spsm
    subroutine psb_@X@spsm(alpha, t, x, beta, y,&
         & desc_a, info, trans, scale, choice,&
         & diag, n, jx, jy, work)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@spmat_type), intent(in)        :: t
      @TYPE@(@FKIND@), intent(in), target    :: x(:,:)
      @TYPE@(@FKIND@), intent(inout), target :: y(:,:)
      @TYPE@(@FKIND@), intent(in)            :: alpha, beta
      type(psb_desc_type), intent(in)          :: desc_a
      character, optional, intent(in)          :: trans, scale
      integer(psb_ipk_), optional, intent(in)            :: n, jx, jy
      integer(psb_ipk_), optional, intent(in)            :: choice
      @TYPE@(@FKIND@), optional, intent(in), target :: diag(:)
      @TYPE@(@FKIND@), optional, intent(inout), target :: work(:)
      integer(psb_ipk_), intent(out)               :: info
    end subroutine psb_@X@spsm
    subroutine psb_@X@spsv(alpha, t, x, beta, y,&
         & desc_a, info, trans, scale, choice,&
         & diag, work)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@spmat_type), intent(in)        :: t
      @TYPE@(@FKIND@), intent(in), target    :: x(:)
      @TYPE@(@FKIND@), intent(inout), target :: y(:)
      @TYPE@(@FKIND@), intent(in)            :: alpha, beta
      type(psb_desc_type), intent(in)          :: desc_a
      character, optional, intent(in)          :: trans, scale
      integer(psb_ipk_), optional, intent(in)            :: choice
      @TYPE@(@FKIND@), optional, intent(in), target :: diag(:)
      @TYPE@(@FKIND@), optional, intent(inout), target :: work(:)
      integer(psb_ipk_), intent(out)                   :: info
    end subroutine psb_@X@spsv
    subroutine psb_@X@spsv_vect(alpha, t, x, beta, y,&
         & desc_a, info, trans, scale, choice,&
         & diag, work)
      import :: psb_desc_type, @FKIND@, psb_ipk_, &
           & psb_@X@_vect_type, psb_@X@spmat_type
      type(psb_@X@spmat_type), intent(inout)   :: t
      type(psb_@X@_vect_type), intent(inout)   :: x
      type(psb_@X@_vect_type), intent(inout)   :: y
      @TYPE@(@FKIND@), intent(in)          :: alpha, beta
      type(psb_desc_type), intent(in)        :: desc_a
      character, optional, intent(in)        :: trans, scale
      integer(psb_ipk_), optional, intent(in)          :: choice
      type(psb_@X@_vect_type), intent(inout), optional :: diag
      @TYPE@(@FKIND@), optional, intent(inout), target :: work(:)
      integer(psb_ipk_), intent(out)                   :: info
    end subroutine psb_@X@spsv_vect
  end interface

  interface psb_gemlt
    subroutine psb_@X@mlt_vect(x,y,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end subroutine psb_@X@mlt_vect
    subroutine psb_@X@mlt_vect2(alpha,x,y,beta,z,desc_a,info,conjgx,conjgy)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type, @FKIND@
      @TYPE@(@FKIND@), intent(in)        :: alpha,beta
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_@X@_vect_type), intent (inout) :: z
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
      character(len=1), intent(in), optional :: conjgx, conjgy
    end subroutine psb_@X@mlt_vect2
  end interface

  interface psb_gediv
    subroutine psb_@X@div_vect(x,y,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end subroutine psb_@X@div_vect
    subroutine psb_@X@div_vect2(x,y,z,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_@X@_vect_type), intent (inout) :: z
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end subroutine psb_@X@div_vect2
    subroutine psb_@X@div_vect_check(x,y,desc_a,info,flag)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
      logical, intent(in)                   :: flag
    end subroutine psb_@X@div_vect_check
    subroutine psb_@X@div_vect2_check(x,y,z,desc_a,info,flag)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_@X@_vect_type), intent (inout) :: z
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
      logical, intent(in)                   :: flag
    end subroutine psb_@X@div_vect2_check
  end interface

  interface psb_geinv
    subroutine psb_@X@inv_vect(x,y,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end subroutine psb_@X@inv_vect
    subroutine psb_@X@inv_vect_check(x,y,desc_a,info,flag)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
      logical, intent(in)                   :: flag
    end subroutine psb_@X@inv_vect_check
  end interface

  interface psb_geabs
    subroutine psb_@X@abs_vect(x,y,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end subroutine psb_@X@abs_vect
  end interface

  @NOTINTS@
  interface psb_gecmp
    subroutine psb_@X@cmp_vect(x,c,z,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type, @FKIND@
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: z
      @RTYPE@(@FKIND@), intent(in)             :: c
      type(psb_desc_type), intent (in)        :: desc_a
      integer(psb_ipk_), intent(out)          :: info
    end subroutine psb_@X@cmp_vect
  end interface
  interface psb_geaddconst
    subroutine psb_@X@addconst_vect(x,b,z,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type, @FKIND@
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: z
      @RTYPE@(@FKIND@), intent(in)            :: b
      type(psb_desc_type), intent (in)        :: desc_a
      integer(psb_ipk_), intent(out)          :: info
    end subroutine psb_@X@addconst_vect
  end interface
  @NOTINTE@

  @NOTINTS@
  @NOTCPLXS@
  interface psb_mask
    subroutine psb_@X@mask_vect(c,x,m,t,desc_a,info)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type, @FKIND@
      type(psb_@X@_vect_type), intent (inout) :: c
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: m
      logical, intent(out)                    :: t
      type(psb_desc_type), intent (in)        :: desc_a
      integer(psb_ipk_), intent(out)          :: info
    end subroutine psb_@X@mask_vect
  end interface
  interface psb_minquotient
    function psb_@X@minquotient_vect(x,y,desc_a,info,global) result(res)
      import :: psb_desc_type, psb_ipk_, &
           & psb_@X@_vect_type, @FKIND@
      @RTYPE@(@FKIND@)                        :: res
      type(psb_@X@_vect_type), intent (inout) :: x
      type(psb_@X@_vect_type), intent (inout) :: y
      type(psb_desc_type), intent (in)        :: desc_a
      integer(psb_ipk_), intent(out)          :: info
      logical, intent(in), optional           :: global
    end function
  end interface
  @NOTCPLXE@
  @NOTINTE@

  interface psb_nnz
    function  psb_@X@get_nnz(a,desc_a,info) result(res)
      import :: psb_desc_type, psb_ipk_, psb_lpk_, &
        & psb_@X@spmat_type, @FKIND@
      integer(psb_lpk_)                     :: res
      type(psb_@X@spmat_type), intent(in)   :: a
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end function
  end interface

  interface psb_is_matupd
    function psb_@X@_is_matupd(a,desc_a,info) result(res)
      import :: psb_desc_type, psb_@X@spmat_type, &
        & @FKIND@, psb_ipk_
      logical                               :: res
      type(psb_@X@spmat_type), intent(in)   :: a
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end function
  end interface

  interface psb_is_matasb
    function psb_@X@_is_matasb(a,desc_a,info) result(res)
      import :: psb_desc_type, psb_@X@spmat_type, &
        & @FKIND@, psb_ipk_
      logical                               :: res
      type(psb_@X@spmat_type), intent(in)   :: a
      type(psb_desc_type), intent (in)      :: desc_a
      integer(psb_ipk_), intent(out)        :: info
    end function
  end interface

end module psb_@X@_psblas_mod

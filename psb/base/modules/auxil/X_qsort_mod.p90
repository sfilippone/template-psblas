!   
!                Parallel Sparse BLAS  version 3.5
!      (C) Copyright 2006-2018
!        Salvatore Filippone    
!        Alfredo Buttari      
!   
!    Redistribution and use in source and binary forms, with or without
!    modification, are permitted provided that the following conditions
!    are met:
!      1. Redistributions of source code must retain the above copyright
!         notice, this list of conditions and the following disclaimer.
!      2. Redistributions in binary form must reproduce the above copyright
!         notice, this list of conditions, and the following disclaimer in the
!         documentation and/or other materials provided with the distribution.
!      3. The name of the PSBLAS group or the names of its contributors may
!         not be used to endorse or promote products derived from this
!         software without specific written permission.
!   
!    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
!    ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
!    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
!    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PSBLAS GROUP OR ITS CONTRIBUTORS
!    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
!    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
!    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
!    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
!    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
!    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
!    POSSIBILITY OF SUCH DAMAGE.
!   
!    
!
!  Sorting routines
!  References:
!  D. Knuth
!  The Art of Computer Programming, vol. 3
!  Addison-Wesley
!  
!  Aho, Hopcroft, Ullman
!  Data Structures and Algorithms
!  Addison-Wesley
!
module psb_@X@_qsort_mod
  use psb_const_mod


  @REALS@

  interface psb_bsrch
    function  psb_@X@bsrch(key,n,v) result(ipos)
      import 
      integer(psb_ipk_) :: ipos, n
      @TYPE@(@FKIND@) :: key
      @TYPE@(@FKIND@) :: v(:)
    end function psb_@X@bsrch
  end interface psb_bsrch

  interface psb_ssrch
    function psb_@X@ssrch(key,n,v) result(ipos)
      import 
      implicit none
      integer(psb_ipk_) :: ipos, n
      @TYPE@(@FKIND@) :: key
      @TYPE@(@FKIND@) :: v(:)
    end function psb_@X@ssrch
  end interface psb_ssrch
@REALE@

  interface psb_qsort
    subroutine psb_@X@qsort(x,ix,dir,flag)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(psb_ipk_), optional, intent(in)    :: dir, flag
      integer(@IXKIND@), optional, intent(inout) :: ix(:)
    end subroutine psb_@X@qsort
  end interface psb_qsort
  
  interface 
    @REALS@
    subroutine psi_@X@qsrx_up(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@qsrx_up
    subroutine psi_@X@qsrx_dw(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@qsrx_dw
    subroutine psi_@X@qsr_up(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@qsr_up
    subroutine psi_@X@qsr_dw(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@qsr_dw
    @REALE@
    @CPLXS@
    subroutine psi_@X@lqsrx_up(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@lqsrx_up
    subroutine psi_@X@lqsrx_dw(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@lqsrx_dw
    subroutine psi_@X@lqsr_up(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@lqsr_up
    subroutine psi_@X@lqsr_dw(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@lqsr_dw
    subroutine psi_@X@alqsrx_up(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@alqsrx_up
    subroutine psi_@X@alqsrx_dw(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@alqsrx_dw
    subroutine psi_@X@alqsr_up(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@alqsr_up
    subroutine psi_@X@alqsr_dw(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@alqsr_dw
    @CPLXE@
    subroutine psi_@X@aqsrx_up(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@aqsrx_up
    subroutine psi_@X@aqsrx_dw(n,x,ix)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(inout) :: ix(:)
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@aqsrx_dw
    subroutine psi_@X@aqsr_up(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@aqsr_up
    subroutine psi_@X@aqsr_dw(n,x)
      import 
      @TYPE@(@FKIND@), intent(inout)  :: x(:) 
      integer(@IXKIND@), intent(in)   :: n
    end subroutine psi_@X@aqsr_dw
  end interface

end module psb_@X@_qsort_mod

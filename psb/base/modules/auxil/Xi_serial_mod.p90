!
!                Parallel Sparse BLAS  version 3.5
!      (C) Copyright 2006-2018
!        Salvatore Filippone
!        Alfredo Buttari
!
!    Redistribution and use in source and binary forms, with or without
!    modification, are permitted provided that the following conditions
!    are met:
!      1. Redistributions of source code must retain the above copyright
!         notice, this list of conditions and the following disclaimer.
!      2. Redistributions in binary form must reproduce the above copyright
!         notice, this list of conditions, and the following disclaimer in the
!         documentation and/or other materials provided with the distribution.
!      3. The name of the PSBLAS group or the names of its contributors may
!         not be used to endorse or promote products derived from this
!         software without specific written permission.
!
!    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
!    ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
!    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
!    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE PSBLAS GROUP OR ITS CONTRIBUTORS
!    BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
!    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
!    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
!    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
!    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
!    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
!    POSSIBILITY OF SUCH DAMAGE.
!
!
module psi_@X@_serial_mod
  @INTS@
  use psb_const_mod, only : psb_ipk_, psb_lpk_, psb_mpk_, psb_epk_
  @INTE@
  @NOTINTS@
  use psb_const_mod, only :  psb_ipk_, psb_lpk_, psb_mpk_, psb_epk_, @FKIND@
  @NOTINTE@

  interface psb_gelp 
    ! 2-D version
    subroutine psb_m_@X@gelp(trans,iperm,x,info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, psb_mpk_, @FKIND@
      @NOTINTE@
      implicit none
      @TYPE@(@FKIND@), intent(inout)     ::  x(:,:)
      integer(psb_mpk_), intent(in)      ::  iperm(:)
      integer(psb_ipk_), intent(out)     ::  info
      character, intent(in)              :: trans
    end subroutine psb_m_@X@gelp
    subroutine psb_m_@X@gelpv(trans,iperm,x,info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, psb_mpk_,@FKIND@
      @NOTINTE@
      implicit none
      @TYPE@(@FKIND@), intent(inout)     ::  x(:)
      integer(psb_mpk_), intent(in)      ::  iperm(:)
      integer(psb_ipk_), intent(out)     ::  info
      character, intent(in)              :: trans
    end subroutine psb_m_@X@gelpv
    subroutine psb_e_@X@gelp(trans,iperm,x,info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, psb_epk_, @FKIND@
      @NOTINTE@
      implicit none
      @TYPE@(@FKIND@), intent(inout)     ::  x(:,:)
      integer(psb_epk_), intent(in)      ::  iperm(:)
      integer(psb_ipk_), intent(out)     ::  info
      character, intent(in)              :: trans
    end subroutine psb_e_@X@gelp
    subroutine psb_e_@X@gelpv(trans,iperm,x,info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, psb_epk_, @FKIND@
      @NOTINTE@
      implicit none
      @TYPE@(@FKIND@), intent(inout)     ::  x(:)
      integer(psb_epk_), intent(in)      ::  iperm(:)
      integer(psb_ipk_), intent(out)     ::  info
      character, intent(in)              :: trans
    end subroutine psb_e_@X@gelpv
  end interface psb_gelp

  interface psb_geaxpby
    subroutine psi_@X@axpby(m,n,alpha, x, beta, y, info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_), intent(in)      :: m, n
      @TYPE@(@FKIND@), intent (in)       ::  x(:,:)
      @TYPE@(@FKIND@), intent (inout)    ::  y(:,:)
      @TYPE@(@FKIND@), intent (in)       ::  alpha, beta
      integer(psb_ipk_), intent(out)     :: info
    end subroutine psi_@X@axpby
    subroutine psi_@X@axpbyv(m,alpha, x, beta, y, info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_), intent(in)      :: m
      @TYPE@(@FKIND@), intent (in)       ::  x(:)
      @TYPE@(@FKIND@), intent (inout)    ::  y(:)
      @TYPE@(@FKIND@), intent (in)       :: alpha, beta
      integer(psb_ipk_), intent(out)     :: info
    end subroutine psi_@X@axpbyv
    subroutine psi_@X@axpbyv2(m,alpha, x, beta, y, z, info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_), intent(in)      :: m
      @TYPE@(@FKIND@), intent (in)       ::  x(:)
      @TYPE@(@FKIND@), intent (in)       ::  y(:)
      @TYPE@(@FKIND@), intent (inout)    ::  z(:)
      @TYPE@(@FKIND@), intent (in)       :: alpha, beta
      integer(psb_ipk_), intent(out)     :: info
    end subroutine psi_@X@axpbyv2
  end interface psb_geaxpby

  interface psi_abgdxyz
    subroutine psi_@X@abgdxyz(m,alpha, beta, gamma,delta,x, y, z, info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_), intent(in)      :: m
      @TYPE@(@FKIND@), intent (in)       ::  x(:)
      @TYPE@(@FKIND@), intent (inout)    ::  y(:)
      @TYPE@(@FKIND@), intent (inout)    ::  z(:)
      @TYPE@(@FKIND@), intent (in)       :: alpha, beta,gamma,delta
      integer(psb_ipk_), intent(out)     :: info
    end subroutine psi_@X@abgdxyz
  end interface psi_abgdxyz
  
  interface psi_xyzw
    subroutine psi_@X@xyzw(m,a,b,c,d,e,f,x, y, z,w, info)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_), intent(in)      :: m
      @TYPE@(@FKIND@), intent (in)       :: x(:)
      @TYPE@(@FKIND@), intent (inout)    :: y(:)
      @TYPE@(@FKIND@), intent (inout)    :: z(:)
      @TYPE@(@FKIND@), intent (inout)    :: w(:)
      @TYPE@(@FKIND@), intent (in)       :: a,b,c,d,e,f
      integer(psb_ipk_), intent(out)     :: info
    end subroutine psi_@X@xyzw
  end interface psi_xyzw
  
  interface psi_gth
    subroutine psi_@X@gthmv(n,k,idx,alpha,x,beta,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: x(:,:), y(:),alpha,beta
    end subroutine psi_@X@gthmv
    subroutine psi_@X@gthv(n,idx,alpha,x,beta,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_) :: n, idx(:)
      @TYPE@(@FKIND@) :: x(:), y(:),alpha,beta
    end subroutine psi_@X@gthv
    subroutine psi_@X@gthzmv(n,k,idx,x,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: x(:,:), y(:)

    end subroutine psi_@X@gthzmv
    subroutine psi_@X@gthzmm(n,k,idx,x,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: x(:,:), y(:,:)

    end subroutine psi_@X@gthzmm
    subroutine psi_@X@gthzv(n,idx,x,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_) :: n, idx(:)
      @TYPE@(@FKIND@) :: x(:), y(:)
    end subroutine psi_@X@gthzv
  end interface psi_gth

  interface psi_sct
    subroutine psi_@X@sctmm(n,k,idx,x,beta,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: beta, x(:,:), y(:,:)
    end subroutine psi_@X@sctmm
    subroutine psi_@X@sctmv(n,k,idx,x,beta,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_) :: n, k, idx(:)
      @TYPE@(@FKIND@) :: beta, x(:), y(:,:)
    end subroutine psi_@X@sctmv
    subroutine psi_@X@sctv(n,idx,x,beta,y)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none

      integer(psb_ipk_) :: n, idx(:)
      @TYPE@(@FKIND@) :: beta, x(:), y(:)
    end subroutine psi_@X@sctv
  end interface psi_sct

  interface psi_exscan
    subroutine psi_@X@_exscanv(n,x,info,shift)
      @INTS@
      import :: psb_ipk_, psb_lpk_,psb_mpk_, psb_epk_
      @INTE@
      @NOTINTS@
      import :: psb_ipk_, @FKIND@
      @NOTINTE@
      implicit none
      integer(psb_ipk_), intent(in)      :: n
      @TYPE@(@FKIND@), intent (inout)    :: x(:)
      integer(psb_ipk_), intent(out)     :: info
      @TYPE@(@FKIND@), intent(in), optional :: shift
    end subroutine psi_@X@_exscanv
  end interface psi_exscan
  
end module psi_@X@_serial_mod
